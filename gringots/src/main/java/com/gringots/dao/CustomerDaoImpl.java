package com.gringots.dao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Repository;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

@Repository
public class CustomerDaoImpl implements  CustomerDao{

    @Autowired
    DataSource dataSource;

    @Override
    public boolean customerAlreadyExist(String email) {
        return false;
    }

    @Override
    public boolean createCustomer(String customerType, String address, String phoneNumber, String nicImage, String email) throws SQLException {
        Connection connection = dataSource.getConnection();
        PreparedStatement preparedStatement = connection.prepareStatement("insert into customer (transactionReference,transactionDate,paymentChannel) values (?,?,?)", Statement.RETURN_GENERATED_KEYS);
//        preparedStatement.setLong(1, transactionReference);
//        preparedStatement.setDate(2, new java.sql.Date(currentDate.getTime()));
//        preparedStatement.setString(3, method);

//        CREATE TABLE `customer` (
//  `customer_id` BIGINT,
//  `customer_type` enum('individual','organization'),
//  `address` varchar(150),
//  `phone_number` int,
//  `nic_image` blob,
//  `email` VARCHAR(45) UNIQUE NOT NULL,
//                PRIMARY KEY (`customer_id`)
//);


//        int x = preparedStatement.executeUpdate();
//
//        ResultSet tableKeys = preparedStatement.getGeneratedKeys();
//        tableKeys.next();
//        int autoGeneratedID = tableKeys.getInt(1);
//        logger.info("New record created for : " + transactionReference);
//        return x > 0;
        return false;
    }
}
